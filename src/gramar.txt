
; exp ABNF

exp     = exp1 *( op1 exp1 )

exp1    = exp2 *( op2 exp2 )

exp2    = exp3 *( op3 exp3 )

exp3    = exp4 *( op4 exp4 )

exp4    = [ op5 ] exp4
         / expn

expn    =  op7  exp1
         / exp5

exp5    = exp7 *((op6 exp7) / call / index)

exp7    = IDEN / INT / FLOAT / STR
          / '(' exp ')'

index   = '[' exp ']'

call    = '(' args ')'

exp_args    = *( exp *( ',' exp  ) *( ',' de_val  ) )

de_val     =  iden '=' exp

op1     = '&&' / '||'

op2     = '>' / '<' / '>=' /'<=' / '!='

op3     = '+' / '-'

op4     = '*' / '/' / '%'

op5     = '-'

op6     = '.'

op7     = 'not'

if-stmt =       'if' exp s_stmt  ['else' s_stmt]

stmt    = *(s_stmt '\n')

s_stmt  =   assign-stmt
          / var-stmt
          / if-stmt
          / while-stmt
          / '{' stmt '}'
            ;todo more

while-stmt  = 'while' exp stmt

fun-def   =   'def' iden '(' def_args ')' stmt

def_args   = *( iden *( ',' iden  ) *( ',' de_val  ) )
